name: CI

on: 
  push:
    branches:
      - "**"

defaults:
  run:
    shell: bash -l {0}

permissions:
  contents: write

jobs:
  windows-build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: mamba-org/setup-micromamba@v1
      with:
        micromamba-version: latest
        environment-name: pam-win
        environment-file: requirements/base.txt
        create-args: >-
          -f requirements/dev.txt
          -c city-modelling-lab
          python=3.11
        post-cleanup: all
        cache-environment: true
    - name: install PAM
      run: |
        pip install --no-dependencies -e .
        python -m ipykernel install --user --name pam
    - name: run tests
      run: pytest

  py39-build:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v2
      - uses: mamba-org/setup-micromamba@v1
        with:
          micromamba-version: latest
          environment-name: pam-linux-39
          environment-file: requirements/base.txt
          create-args: >-
              -c city-modelling-lab
              -f requirements/dev.txt
              python=3.9
          post-cleanup: all
          cache-environment: true
  
      - name: install PAM
        run: |
          pip install --no-dependencies -e .
          python -m ipykernel install --user --name pam
  
      - name: Run unit tests
        run: pytest tests/ --no-cov
      
  py311-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with: 
        fetch-depth: 0  # used to build docs into the gh-pages branch without losing branch history. See https://github.com/jimporter/mike/issues/49
    - uses: mamba-org/setup-micromamba@v1
      with:
        micromamba-version: latest
        environment-name: pam-linux-311
        environment-file: requirements/base.txt
        create-args: >-
            -c city-modelling-lab
            -f requirements/dev.txt
            python=3.9
        post-cleanup: all
        cache-environment: true

    - name: install PAM
      run: |
        pip install --no-dependencies -e .
        python -m ipykernel install --user --name pam

    - name: Run tests
      run: pytest
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      env: 
        directory: "./reports/coverage/"

    - name: Setup doc deploy
      run: |
        git config --global user.name Docs deploy
        git config --global user.email docs@dummy.bot.com
        
    - name: Test that docs build
      if: github.ref != 'refs/heads/main'
      run: mike deploy develop

    - name: deploy docs to gh-pages branch
      if: github.ref == 'refs/heads/main'
      run: mike deploy --push develop

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Push zip to S3
      env:
        AWS_S3_CODE_BUCKET: ${{ secrets.AWS_S3_CODE_BUCKET }}
      run: |
        echo $GITHUB_REPOSITORY
        echo $GITHUB_SHA
        echo $GITHUB_SHA > release
        if test "$GITHUB_REF" = "refs/heads/main"; then
          echo "Branch is main - no need to make a release name..."
        else
          echo "Making a release name for non-main branch..."
          branch=`echo $GITHUB_REF | awk -F '/' '{print $3}'`
          release_name=`echo $GITHUB_ACTOR-$branch`
          echo "Release name: $release_name"
          echo $release_name > release_name
        fi
        zip -r app.zip .
        repo_slug=`echo $GITHUB_REPOSITORY | awk -F '/' '{print $2}'`
        echo $repo_slug
        aws s3 cp app.zip "s3://$AWS_S3_CODE_BUCKET/$repo_slug.zip"

    - name: Send build success notification
      if: success()
      uses: rtCamp/action-slack-notify@v2.0.0
      env:
        SLACK_MESSAGE: ${{ github.repository }} build ${{ github.run_number }} launched by ${{ github.actor }} has succeeded
        SLACK_TITLE: Build Success
        SLACK_CHANNEL: pam-feeds
        SLACK_USERNAME: GitHub Build Bot
        SLACK_ICON: https://slack-files2.s3-us-west-2.amazonaws.com/avatars/2017-12-19/288981919427_f45f04edd92902a96859_512.png
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

    - name: Send build failure notification
      if: failure()
      uses: rtCamp/action-slack-notify@v2.0.0
      env:
        SLACK_COLOR: '#FF0000'
        SLACK_MESSAGE: ${{ github.repository }} build ${{ github.run_number }} launched by ${{ github.actor }} has failed
        SLACK_TITLE: Build Failure!
        SLACK_CHANNEL: pam-feeds
        SLACK_USERNAME: GitHub Build Bot
        SLACK_ICON: https://slack-files2.s3-us-west-2.amazonaws.com/avatars/2017-12-19/288981919427_f45f04edd92902a96859_512.png
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
